Object subclass: #Block	instanceVariableNames: 'x y'	classVariableNames: ''	poolDictionaries: ''	category: 'PacmanBlocTest'!!Block methodsFor: 'initialization' stamp: 'xxx 11/20/2017 20:31'!initialize	x := 0.	y := 0.! !!Block methodsFor: 'accessing' stamp: 'xxx 11/20/2017 20:32'!y	^ y! !!Block methodsFor: 'accessing' stamp: 'xxx 11/20/2017 20:32'!x: aNumber	x := aNumber ! !!Block methodsFor: 'accessing' stamp: 'xxx 11/20/2017 20:32'!x	^ x! !!Block methodsFor: 'accessing' stamp: 'xxx 11/20/2017 20:32'!y: aNumber	y := aNumber ! !BlElement subclass: #BlockView	instanceVariableNames: 'color isPacman isGhost model direction tick'	classVariableNames: ''	poolDictionaries: ''	category: 'PacmanBlocTest'!!BlockView methodsFor: 'accessing structure variables' stamp: 'xxx 11/20/2017 20:41'!y	^ model y! !!BlockView methodsFor: 'accessing structure variables' stamp: 'xxx 11/20/2017 20:41'!x	^ model x! !!BlockView methodsFor: 'accessing' stamp: 'xxx 11/20/2017 20:33'!model	^model! !!BlockView methodsFor: 'accessing' stamp: 'xxx 11/20/2017 20:31'!model: aModel	model := aModel! !!BlockView methodsFor: 'accessing' stamp: 'xxx 11/21/2017 10:23'!direction: aDirection	direction := aDirection ! !!BlockView methodsFor: 'accessing' stamp: 'xxx 11/14/2017 13:24'!color: aColor	color := aColor! !!BlockView methodsFor: 'as yet unclassified' stamp: 'xxx 11/14/2017 13:24'!backgroundPaint	^ color! !!BlockView methodsFor: 'as yet unclassified' stamp: 'xxx 11/20/2017 20:47'!pacman	self background: self backgroundPacman.	isPacman := true! !!BlockView methodsFor: 'as yet unclassified' stamp: 'xxx 11/21/2017 10:30'!incTick	tick := (tick + 1) \\ 6.	self background: self backgroundPacman.! !!BlockView methodsFor: 'as yet unclassified' stamp: 'xxx 11/20/2017 20:46'!ghost 	self background: self backgroundGhost.	isGhost := true! !!BlockView methodsFor: 'drawing' stamp: 'xxx 11/20/2017 20:48'!drawOnSpartaCanvas: aCanvas	(isPacman or: isGhost)		ifTrue: [ self background drawOnSpartaCanvas: aCanvas of: self ]		ifFalse: [ aCanvas fill				paint: self backgroundPaint;				path: self boundsInLocal;				draw ]! !!BlockView methodsFor: 'examples - background' stamp: 'xxx 11/20/2017 20:52'!backgroundGhost		^ BlBackground builder		image: ((Form fromFileNamed: './pacman_images/ghost0_d0.png') magnifyBy: 1.4 );		opacity: 1; "changes opacity of pharo logo"		"image: (Smalltalk ui icons iconNamed: #info);		paint: Color gray;		opacity: 0.2; "		build! !!BlockView methodsFor: 'examples - background' stamp: 'xxx 11/20/2017 20:18'!backgroundWithImageAndColor		^ BlBackground builder		image: ((Form fromFileNamed: '../pacman_images/pacman-r1.png') magnifyBy: 1.4 );		opacity: 1; "changes opacity of pharo logo"		"image: (Smalltalk ui icons iconNamed: #info);		paint: Color gray;		opacity: 0.2; "		build! !!BlockView methodsFor: 'examples - background' stamp: 'xxx 11/21/2017 10:29'!backgroundPacman		^ BlBackground builder		image: ((Form fromFileNamed: './pacman_images/pacman-',direction,tick asString,'.png') magnifyBy: 1.4 );		opacity: 1;		build! !!BlockView methodsFor: 'navigation' stamp: 'xxx 11/20/2017 20:37'!moveDown	model y: (model y + 1).	self relocate: (model x)@(model y).! !!BlockView methodsFor: 'navigation' stamp: 'xxx 11/20/2017 20:36'!moveLeft	model x: (model x - 1).	self relocate: (model x)@(model y).! !!BlockView methodsFor: 'navigation' stamp: 'xxx 11/20/2017 20:36'!moveRight	model x: (model x + 1).	self relocate: (model x)@(model y).! !!BlockView methodsFor: 'navigation' stamp: 'xxx 11/20/2017 20:36'!moveUp	model y: (model y - 1).	self relocate: (model x)@(model y).! !!BlockView methodsFor: 'initialization' stamp: 'xxx 11/21/2017 10:29'!initialize	super initialize.	color := Color black.	self size: 32 @ 32.	isPacman := false.	isGhost  := false.	tick := 0.	direction := 'r'.! !Object subclass: #Game	instanceVariableNames: 'pac1 pac2 space'	classVariableNames: ''	poolDictionaries: ''	category: 'PacmanBlocTest'!!Game methodsFor: 'as yet unclassified' stamp: 'xxx 11/21/2017 11:26'!animate	| ticker direction twice |	direction := 'right'.	ticker := TickTimer new.	twice := 0.	space addEventHandler: (BlEventHandler on: BlKeyDownEvent			do: [ :anEvent | "self inform: 'Keystroke: ', anEvent key asString"					anEvent key = Key arrowDown 						ifTrue: [ direction := 'down'. pac1 direction: 'd' ].					anEvent key = Key arrowUp 						ifTrue: [ direction := 'up'. pac1 direction: 'u' ].					anEvent key = Key arrowRight  						ifTrue: [ direction := 'right'. pac1 direction: 'r' ].					anEvent key = Key arrowLeft 						ifTrue: [ direction := 'left'. pac1 direction: 'l' ].					anEvent key = Key escape						ifTrue: [ ticker stop ].								 ]).	[ ticker		tick: [ 			"((pac1 x = 128) and: (pac1 y = 32 ))				ifTrue: [ direction := 'down'. pac1 direction: 'd' ].			((pac1 x = 128) and: (pac1 y = 64 ))				ifTrue: [ direction := 'left'. pac1 direction: 'l' ].			((pac1 x = 32) and: (pac1 y = 64 ))				ifTrue: [ direction := 'up'. pac1 direction: 'u' ].			((pac1 x = 32) and: (pac1 y = 32 ))				ifTrue: [ direction := 'right'. pac1 direction: 'r' ]."			(direction = 'left')				ifTrue: [ 					"pac1 relocate: (pac1 position x - 1)@(pac1 position y).					pac2 relocate: (pac2 position x + 1)@(pac2 position y)."					pac1 moveLeft.					pac2 moveRight.					"Transcript show: 'left - '; show: pac1 position; cr."				].			(direction = 'down')				ifTrue: [ 					"pac1 relocate: (pac1 position x)@(pac1 position y + 1).					pac2 relocate: (pac2 position x )@(pac2 position y - 1)."					pac1 moveDown.					pac2 moveUp.					"Transcript show: 'down - '; show: pac1 position; cr."				].			(direction = 'right')				ifTrue: [ 					"pac1 relocate: (pac1 position x + 1)@(pac1 position y).					pac2 relocate: (pac2 position x - 1)@(pac2 position y)."					pac1 moveRight.					pac2 moveLeft.					"Transcript show: 'right - '; show: pac1 position; cr."				].			(direction = 'up')				ifTrue: [ 					"pac1 relocate: (pac1 position x)@(pac1 position y - 1).					pac2 relocate: (pac2 position x)@(pac2 position y + 1)."					pac1 moveUp.					pac2 moveDown.					"Transcript show: 'up - '; show: pac1 position; cr."				].			twice := twice + 1.			(twice = 2)				ifTrue: [ 					pac1 incTick.					twice := 0.				]					] ] fork! !!Game methodsFor: 'running' stamp: 'xxx 11/21/2017 11:30'!run	| grid |	grid := Map new.	space := BlSpace new.	space root addChild: grid.	pac1 := BlockView new color: Color yellow.	pac2 := BlockView new color: Color green.	pac1 model: Block new.	pac2 model: Block new.	pac1 relocate: 16@160.	pac1 model x: 160.	pac1 model y: 160.	pac2 relocate: 192@192.	pac2 model x: 192.	pac2 model y: 192.	pac1 pacman.	pac2 ghost.	space root addChild: pac1.	space root addChild: pac2.	space show.	(Delay forMilliseconds: 1000) wait.	self animate! !BlElement subclass: #Map	instanceVariableNames: 'rows columns'	classVariableNames: ''	poolDictionaries: ''	category: 'PacmanBlocTest'!!Map methodsFor: 'initialization' stamp: 'xxx 11/20/2017 19:12'!initialize	| ios x currentLine |	super initialize.	ios := FileStream oldFileNamed: 'map.txt'.	"	[(x := ios nextLine) notNil]   			whileTrue: [Transcript show: x; cr]."	columns := ios nextLine asNumber.	rows := ios nextLine asNumber.	self layout: BlGridLayout horizontal.	self layout columnCount: columns.	self		constraintsDo: [ :aLayoutConstraints | 		aLayoutConstraints horizontal fitContent.		aLayoutConstraints vertical fitContent ].	1 to: rows do:[ :i | 		currentLine := ios nextLine. 		1 to: columns do: 			[ :j | (currentLine at: j) = $1 				ifTrue: [self addChild: (BlockView new color: Color blue)] 				ifFalse: [self addChild: BlockView new ] 			] 		].	ios close.! !Object subclass: #TickTimer	instanceVariableNames: 'ticks maxTicks running'	classVariableNames: ''	poolDictionaries: ''	category: 'PacmanBlocTest'!!TickTimer methodsFor: 'as yet unclassified' stamp: 'xxx 11/21/2017 11:27'!tick: aBlock	aBlock value.	ticks := ticks + 1.	"Transcript show: ticks; cr."	"ticks < maxTicks" running 		ifTrue: [ (Delay forMilliseconds: 20) wait.			self tick: aBlock ]! !!TickTimer methodsFor: 'accessing' stamp: 'xxx 11/21/2017 11:27'!stop	running := false! !!TickTimer methodsFor: 'initialization' stamp: 'xxx 11/21/2017 11:27'!initialize	maxTicks := 480.	ticks := 0.	running := true! !