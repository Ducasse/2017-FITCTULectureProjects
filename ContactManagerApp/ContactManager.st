Object subclass: #WARenderUtility	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'ContactManager-Utilities'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!WARenderUtility class	instanceVariableNames: ''!!WARenderUtility class methodsFor: 'rendering' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!renderNumberInputFieldOn: html withValue: value withLabel: label withRequired: isReq withPlaceholder: placeholder withCallback: callback	html		tbsFormGroup: [ html label: label.			isReq				ifTrue: [ self renderRequiredSpanOn: html ].			html numberInput				tbsFormControl;				placeholder: placeholder;				callback: callback;				value: (value ifNil: '') ]! !!WARenderUtility class methodsFor: 'rendering' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!renderEmailInputFieldOn: html withValue: value withLabel: label withRequired: isReq withPlaceholder: placeholder withCallback: callback	html		tbsFormGroup: [ html label: label.			isReq				ifTrue: [ self renderRequiredSpanOn: html ].			html emailInput				tbsFormControl;				placeholder: placeholder;				callback: callback;				value: (value ifNil: '') ]! !!WARenderUtility class methodsFor: 'rendering' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!renderChoices: choiceDict on: html withSelectedValue: selectedValue withLabel: label withRequired: isReq withCallback: callback	| choiceIds sel |	sel := nil.	choiceIds := choiceDict keys asOrderedCollection.	choiceIds addFirst: nil.	selectedValue ifNotNil: [ sel := selectedValue value ].	html		tbsFormGroup: [ html label: label.			isReq				ifTrue: [ self renderRequiredSpanOn: html ].			html select				class: 'form-control';				list: choiceIds;				selected: sel;				enabled: [ :ea | ea notNil ];				labels: [ :ea | ea ifNil: [ '---' ] ifNotNil: [ choiceDict at: ea ] ];				callback: callback ]! !!WARenderUtility class methodsFor: 'rendering' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!renderDbChoices: choices on: html withSelectedValue: selectedValue withLabel: label withRequired: isReq withCallback: callback	| choiceDict choiceIds sel |	sel := nil.	choiceDict := Dictionary new.	choices do: [ :c | choiceDict at: c id value put: c cname ].	choiceIds := choices collect: [ :c | c id value ].	choiceIds addFirst: nil.	selectedValue ifNotNil: [ sel := selectedValue value ].	html		tbsFormGroup: [ html label: label.			isReq				ifTrue: [ self renderRequiredSpanOn: html ].			html select				class: 'form-control';				list: choiceIds;				selected: sel;				enabled: [ :ea | ea notNil ];				labels: [ :ea | ea ifNil: [ '---' ] ifNotNil: [ choiceDict at: ea ] ];				callback: callback ]! !!WARenderUtility class methodsFor: 'rendering' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!renderInputFieldOn: html withValue: value withLabel: label withRequired: isReq withPlaceholder: placeholder withCallback: callback	html		tbsFormGroup: [ html label: label.			isReq				ifTrue: [ self renderRequiredSpanOn: html ].			html textInput				tbsFormControl;				placeholder: placeholder;				callback: callback;				value: (value ifNil: '') ]! !!WARenderUtility class methodsFor: 'rendering' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!renderRequiredSpanOn: html	html span		style: 'color:red';		with: '*'! !!WARenderUtility class methodsFor: 'rendering' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!renderPartnerBoxFieldOn: html withValue: value withLabel: label withRequired: isReq withCallback: callback	html		tbsFormGroup: [ html checkbox				callback: callback;				value: (value ifNil: false).			html label: label.			isReq				ifTrue: [ self renderRequiredSpanOn: html ] ]! !!WARenderUtility class methodsFor: 'rendering' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!renderCheckBoxFieldOn: html withValue: value withLabel: label withRequired: isReq withCallback: callback	html		tbsFormGroup: [ html checkbox				callback: callback;				value: (value ifNil: false).			html label: label.			isReq				ifTrue: [ self renderRequiredSpanOn: html ] ]! !WAComponent subclass: #WAContactApp	instanceVariableNames: 'main'	classVariableNames: ''	poolDictionaries: ''	category: 'ContactManager-WAComponent'!!WAContactApp methodsFor: 'hooks' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!children   ^ { main }! !!WAContactApp methodsFor: 'updating' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!updateRoot: anHtmlRoot	super updateRoot: anHtmlRoot.	anHtmlRoot title: 'Contact App'! !!WAContactApp methodsFor: 'initialization' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!initialize   super initialize.   main := WAScreenPart new. ! !!WAContactApp methodsFor: 'rendering' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!renderContentOn: html	html render: main! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!WAContactApp class	instanceVariableNames: ''!!WAContactApp class methodsFor: 'initialization' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!initialize	(WAAdmin register: self asApplicationAt: 'contacts')		addLibrary: JQDeploymentLibrary;		addLibrary: TBSDeploymentLibrary.		"FileIn exception avoiding"	[ BaseRepositoryService setupMongoRepository.	self registerServices.	self registerValidators ]		on: Error		do: [  ]! !!WAContactApp class methodsFor: 'initialization' stamp: 'ArturNasyrov 1/4/2018 03:59'!registerServices	ServiceLocatorDefault registerWithName: 'CompanyService' service: CompanyService.	ServiceLocatorDefault registerWithName: 'PersonService' service: PersonService.	ServiceLocatorDefault registerWithName: 'ProspectService' service: ProspectService.	ServiceLocatorDefault registerWithName: 'CountryService' service: CountryService.	ServiceLocatorDefault registerWithName: 'ManagerService' service: ManagerService.	ServiceLocatorDefault registerWithName: 'ProspectStateService' service: ProspectStateService! !!WAContactApp class methodsFor: 'initialization' stamp: 'ArturNasyrov 1/4/2018 01:52'!registerValidators	ServiceLocatorDefault registerWithName: 'RequiredValidator' service: RequiredValidator.	ServiceLocatorDefault registerWithName: 'RequiredOidValidator' service: RequiredOidValidator.	ServiceLocatorDefault registerWithName: 'RangeValidator' service: RangeValidator.	ServiceLocatorDefault registerWithName: 'RemoveCompanyValidator' service: RemoveCompanyValidator.! !WAComponent subclass: #WAScreenCurrent	instanceVariableNames: 'screenPart'	classVariableNames: ''	poolDictionaries: ''	category: 'ContactManager-WAComponent'!!WAScreenCurrent methodsFor: 'rendering' stamp: 'ArturNasyrov 1/4/2018 02:31'!renderValidationMessagesOn: html withGroup: aGroup	self isValidated		ifTrue: [ (ValidationManager errorsOnGroup: aGroup) isEmptyOrNil				ifFalse: [ html div						class: 'alert alert-danger';						with: [ ValidationManager errors do: [ :i | html paragraph with: i ] ] ] ]! !!WAScreenCurrent methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!screenPart: aScreenPart	screenPart := aScreenPart! !!WAScreenCurrent methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 02:05'!isValidated: pb	isValidated := pb! !!WAScreenCurrent methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!screenPart	^ screenPart! !!WAScreenCurrent methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 02:05'!isValidated	^ isValidated! !!WAScreenCurrent methodsFor: 'initialization' stamp: 'ArturNasyrov 1/4/2018 02:07'!initialize	super initialize.	self isValidated: false! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!WAScreenCurrent class	instanceVariableNames: ''!!WAScreenCurrent class methodsFor: 'initialization' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!initializeWithScreenPart: aScreenPart	^ self new		screenPart: aScreenPart;		yourself! !WAScreenCurrent subclass: #WAEdit	instanceVariableNames: 'isNew isValidated tmpEntity'	classVariableNames: ''	poolDictionaries: ''	category: 'ContactManager-WAComponent'!!WAEdit methodsFor: 'hooks' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!style	^ 'input[type=checkbox] { margin-right: 20px; }'! !!WAEdit methodsFor: 'rendering' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!renderSubmitButtonOn: html withCallback: callbackBlock	"Calls validation on click. If sublying entity is valid calls a callback"	html tbsSubmitButton		beSuccess;		bePrimary;		callback: [ self isValidated: true.			self isValid				ifTrue: [ callbackBlock value: tmpEntity ] ];		with: 'Save'! !!WAEdit methodsFor: 'rendering' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!renderButtonsOn: html withSubmitAnswer: submitAnswer	html		tbsFormGroup: [ html				tbsButtonGroup: [ self						renderSubmitButtonOn: html withAnswer: submitAnswer;						renderCancelButtonOn: html ] ]! !!WAEdit methodsFor: 'rendering' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!renderCancelButtonOn: html	html anchor		class: 'btn btn-danger';		callback: [ self answer: nil ];		with: 'Cancel'! !!WAEdit methodsFor: 'rendering' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!renderChoices: choices on: html withLabel: label! !!WAEdit methodsFor: 'rendering' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!renderFieldsOn: html	^ self subclassResponsibility! !!WAEdit methodsFor: 'rendering' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!renderSubmitButtonOn: html withAnswer: answer	html tbsSubmitButton		beSuccess;		bePrimary;		callback: [ self isValidated: true.			self isValid				ifTrue: [  self answer: answer ] ];		with: 'Save'! !!WAEdit methodsFor: 'rendering' stamp: 'ArturNasyrov 1/4/2018 02:34'!renderValidationMessagesOn: html	self renderValidationMessagesOn: html withGroup: tmpEntity class name! !!WAEdit methodsFor: 'rendering' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!renderButtonsOn: html withSubmitCallback: submitCallback	html		tbsFormGroup: [ html				tbsButtonGroup: [ self						renderSubmitButtonOn: html withCallback: submitCallback;						renderCancelButtonOn: html ] ]! !!WAEdit methodsFor: 'initialization' stamp: 'ArturNasyrov 1/4/2018 02:07'!initialize	super initialize.	self isNew: true	"self isValidated: false"! !!WAEdit methodsFor: 'testing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!isValid	^ tmpEntity  isValid! !!WAEdit methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!isNew	^ isNew! !!WAEdit methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!isNew: anIsNew	isNew := anIsNew! !!WAEdit methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!isValidated	^ isValidated! !!WAEdit methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!isValidated: pb	isValidated := pb! !WAEdit subclass: #WACompany	instanceVariableNames: 'company personList prospectList'	classVariableNames: ''	poolDictionaries: ''	category: 'ContactManager-WAComponent'!!WACompany methodsFor: 'initialization' stamp: 'ArturNasyrov 1/4/2018 04:47'!initialize	super initialize.	company := Company new.	tmpEntity := Company new.	personList := WAPersonList new.	prospectList := WAProspectList new! !!WACompany methodsFor: 'save' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!saveCompany	self companyService saveEntity: company! !!WACompany methodsFor: 'as yet unclassified' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!countryService	^ ServiceLocatorDefault resolveWithName: 'CountryService'! !!WACompany methodsFor: 'rendering' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!renderFieldsOn: html	self renderNameFieldOn: html.	self renderCustomerFieldOn: html.	self renderPartnerFieldOn: html.	self renderCountryFieldOn: html.	self renderManagerFieldOn: html.! !!WACompany methodsFor: 'rendering' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!renderCustomerFieldOn: html	WARenderUtility		renderCheckBoxFieldOn: html		withValue: tmpEntity isCustomer		withLabel: 'Customer'		withRequired: false		withCallback: [ :value | tmpEntity isCustomer: value ]! !!WACompany methodsFor: 'rendering' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!renderPartnerFieldOn: html	WARenderUtility		renderPartnerBoxFieldOn: html		withValue: tmpEntity isPartner		withLabel: 'Partner'		withRequired: false		withCallback: [ :value | tmpEntity isPartner: value ]! !!WACompany methodsFor: 'rendering' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!renderNameFieldOn: html	WARenderUtility		renderInputFieldOn: html		withValue: tmpEntity cname		withLabel: 'Name'		withRequired: true		withPlaceholder: 'Name'		withCallback: [ :value | tmpEntity cname: value ]! !!WACompany methodsFor: 'rendering' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!renderManagerFieldOn: html	| manager |	manager := self managerService selectAll.	WARenderUtility		renderChoices: manager		on: html		withSelectedValue: tmpEntity manager		withLabel: 'Manager'		withRequired: true		withCallback: [ :value | tmpEntity manager: value ]! !!WACompany methodsFor: 'rendering' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!style    ^ super style! !!WACompany methodsFor: 'rendering' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!renderCountryFieldOn: html	| countries |	countries := self countryService selectAll.	WARenderUtility		renderChoices: countries		on: html		withSelectedValue: tmpEntity country		withLabel: 'Country'		withRequired: true		withCallback: [ :value | tmpEntity country: value ]! !!WACompany methodsFor: 'rendering' stamp: 'ArturNasyrov 1/4/2018 04:46'!renderContentOn: html	| headerText |	headerText := self isNew		ifTrue: [ 'New Company' ]		ifFalse: [ 'Edit Company' ].	html heading with: headerText.	html tbsForm		with: [ self renderValidationMessagesOn: html.			self renderFieldsOn: html.			self				renderButtonsOn: html				withSubmitCallback: [ :tmp | 					self company copyFrom: tmp.					self saveCompany.					self answer: company ].			html break ].	self isNew		ifTrue: [ ^ self ].	html render: self personList.	html render: self prospectList! !!WACompany methodsFor: 'hooks' stamp: 'ArturNasyrov 1/4/2018 04:46'!children	^ Array		with: personList;		with: prospectList! !!WACompany methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!company	^ company! !!WACompany methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 04:45'!prospectList	^ prospectList! !!WACompany methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!personList: aList	personList := aList! !!WACompany methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!personList	^ personList! !!WACompany methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!setCompany: aCompany	tmpEntity := aCompany clone.	company := aCompany.! !!WACompany methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 04:45'!prospectList: aList	prospectList := aList! !!WACompany methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!companyService	^ ServiceLocatorDefault resolveWithName: 'CompanyService'! !!WACompany methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!managerService	^ ServiceLocatorDefault resolveWithName: 'ManagerService'! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!WACompany class	instanceVariableNames: ''!!WACompany class methodsFor: 'editing' stamp: 'ArturNasyrov 1/4/2018 04:48'!editCompany: aCompany	| c |	c := self new		setCompany: aCompany;		isNew: false;		yourself.	c personList		companyFilter: aCompany;		isInner: true.	c prospectList		companyFilter: aCompany;		isInner: true.	^ c! !WAScreenCurrent subclass: #WAList	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'ContactManager-WAComponent'!!WAList methodsFor: 'rendering' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!renderEditButtonFor: anEntity on: html with: callback	html tbsButton		beSuccess;		callback: [ self call: callback value.			self rebind	"ifNotNil: [ self rebind ]" ];		with: 'Edit'! !!WAList methodsFor: 'rendering' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!renderNewButtonsOn: html with: callback	html		tbsButtonGroup: [ html tbsButton				beSuccess;				callback: [ (self call: callback) ifNotNil: [ self rebind ] ];				with: 'New' ]! !!WAList methodsFor: 'rendering' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!renderRemoveButtonFor: anEntity on: html with: callback	html tbsButton		beDanger;		callback: [ | c |			c := self confirm: 'Are you sure?'.			c				ifTrue: callback.			c				ifTrue: self rebind ];		with: 'Remove'! !!WAList methodsFor: 'rendering' stamp: 'ArturNasyrov 1/4/2018 02:35'!renderValidationMessagesOn: html	self renderValidationMessagesOn: html withGroup: self class name! !!WAList methodsFor: 'binding' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!rebind	^ self subclassResponsibility ! !WAList subclass: #WACompanyList	instanceVariableNames: 'companies'	classVariableNames: ''	poolDictionaries: ''	category: 'ContactManager-WAComponent'!!WACompanyList methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!countryService	^ ServiceLocatorDefault resolveWithName: 'CountryService'.! !!WACompanyList methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!personService	^ ServiceLocatorDefault resolveWithName: 'PersonService'.! !!WACompanyList methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!companies	^ companies ifNil: [ companies := self getAllCompanies ]! !!WACompanyList methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!getAllCompanies	| x |	x := self companyService selectAll.	x isNotNil		ifTrue: [ ^ x ]		ifFalse: [ ^ OrderedCollection new ]! !!WACompanyList methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!companyService	^ ServiceLocatorDefault resolveWithName: 'CompanyService'.! !!WACompanyList methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!managerService	^ ServiceLocatorDefault resolveWithName: 'ManagerService'.! !!WACompanyList methodsFor: 'enumerating' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!companiesDo: aBlock	self companies do: aBlock! !!WACompanyList methodsFor: 'updating' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!updateRoot: anHtmlRoot	super updateRoot: anHtmlRoot.	anHtmlRoot title: 'Companies'! !!WACompanyList methodsFor: 'removing' stamp: 'ArturNasyrov 1/4/2018 02:36'!removeCompany: aCompany	"try to find any company dependencies"	self isValidated: true.	(ValidationManager validateRemove: aCompany onGroup: self class name)		ifTrue: [ self companyService removeEntity: aCompany ]! !!WACompanyList methodsFor: 'rendering' stamp: 'ArturNasyrov 1/4/2018 02:04'!renderContentOn: html	html heading		level: 1;		with: 'Company list'.	html		tbsForm: [ self renderValidationMessagesOn: html.			self renderCompaniesOn: html.			self renderNewButtonsOn: html with: WACompany new ]! !!WACompanyList methodsFor: 'rendering' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!renderCompany: aCompany on: html	html		tableRow: [ html				tableData: aCompany cname;				tableData: (self countryService getCountryById: aCompany country);				tableData: aCompany isCustomer;				tableData: aCompany isPartner;				tableData: (self managerService getManagerById: aCompany manager);				tableData: [ html						tbsButtonGroup: [ self								renderEditButtonFor: aCompany on: html with: [ WACompany editCompany: aCompany ];								renderRemoveButtonFor: aCompany on: html with: [ self removeCompany: aCompany ] ] ] ]! !!WACompanyList methodsFor: 'rendering' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!renderCompaniesOn: html	html		tbsTable: [ html				tableHead: [ html						tableHeading: 'Name';						tableHeading: 'Country';						tableHeading: 'Customer';						tableHeading: 'Partner';						tableHeading: 'Manager'].			self companiesDo:  [ :item | self renderCompany: item on: html ] ]! !!WACompanyList methodsFor: 'binding' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!rebind	companies := self getAllCompanies! !WAEdit subclass: #WAPerson	instanceVariableNames: 'person'	classVariableNames: ''	poolDictionaries: ''	category: 'ContactManager-WAComponent'!!WAPerson methodsFor: 'rendering' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!renderCompanyFieldOn: html	| companies |	companies := self companyService selectAll.	WARenderUtility		renderDbChoices: companies		on: html		withSelectedValue: tmpEntity company		withLabel: 'Company'		withRequired: true		withCallback: [ :value | tmpEntity company: (OID value: value) ]! !!WAPerson methodsFor: 'rendering' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!renderPositionFieldOn: html	WARenderUtility		renderInputFieldOn: html		withValue: tmpEntity position		withLabel: 'Position'		withRequired: false		withPlaceholder: 'Position'		withCallback: [ :value | tmpEntity position: value ]! !!WAPerson methodsFor: 'rendering' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!renderAddressFieldOn: html	WARenderUtility		renderInputFieldOn: html		withValue: tmpEntity address		withLabel: 'Address'		withRequired: false		withPlaceholder: 'Address'		withCallback: [ :value | tmpEntity address: value ]! !!WAPerson methodsFor: 'rendering' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!renderFieldsOn: html	self renderFirstNameFieldOn: html.	self renderLastNameFieldOn: html.	self renderEmailFieldOn: html.	self renderPhoneNumberFieldOn: html.	self renderAddressFieldOn: html.	self renderCompanyFieldOn: html.	self renderPositionFieldOn: html! !!WAPerson methodsFor: 'rendering' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!renderEmailFieldOn: html	WARenderUtility		renderEmailInputFieldOn: html		withValue: tmpEntity email		withLabel: 'Email'		withRequired: true		withPlaceholder: 'your@email.eu'		withCallback: [ :value | tmpEntity email: value ]! !!WAPerson methodsFor: 'rendering' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!renderFirstNameFieldOn: html	WARenderUtility		renderInputFieldOn: html		withValue: tmpEntity firstName		withLabel: 'Name'		withRequired: true		withPlaceholder: 'Name'		withCallback: [ :value | tmpEntity firstName: value ].! !!WAPerson methodsFor: 'rendering' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!renderLastNameFieldOn: html	WARenderUtility		renderInputFieldOn: html		withValue: tmpEntity lastName		withLabel: 'Surname'		withRequired: true		withPlaceholder: 'Surname'		withCallback: [ :value | tmpEntity lastName: value ]! !!WAPerson methodsFor: 'rendering' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!renderPhoneNumberFieldOn: html	WARenderUtility		renderInputFieldOn: html		withValue: tmpEntity phoneNumber		withLabel: 'Phone Number'		withRequired: false		withPlaceholder: 'Phone Number'		withCallback: [ :value | tmpEntity phoneNumber: value ]! !!WAPerson methodsFor: 'rendering' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!renderContentOn: html	| headerText |	headerText := self isNew		ifTrue: [ 'New Person' ]		ifFalse: [ 'Edit Person' ].	html heading with: headerText.	html tbsForm		with: [ self renderValidationMessagesOn: html.			self renderFieldsOn: html.			self				renderButtonsOn: html				withSubmitCallback: [ :tmp | 					self person copyFrom: tmp.					self savePerson.					self answer: person ].			html break ]! !!WAPerson methodsFor: 'save' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!savePerson	self personService saveEntity: person! !!WAPerson methodsFor: 'hooks' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!style    ^ super style! !!WAPerson methodsFor: 'initialization' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!initialize	super initialize.	person := Person new.	tmpEntity := Person new! !!WAPerson methodsFor: 'initialization' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!person	^ person! !!WAPerson methodsFor: 'initialization' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!setPerson: aPerson	tmpEntity := aPerson clone.	person := aPerson.! !!WAPerson methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!companyService	^ ServiceLocatorDefault resolveWithName: 'CompanyService'! !!WAPerson methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!personService	^ ServiceLocatorDefault resolveWithName: 'PersonService'.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!WAPerson class	instanceVariableNames: ''!!WAPerson class methodsFor: 'editing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!editPerson: aPerson	^ self new		setPerson: aPerson;		isNew: false;		yourself! !!WAPerson class methodsFor: 'instance creation' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!newPerson	^ self new		setPerson:  Person  new;		isNew: true;		yourself! !WAList subclass: #WAPersonList	instanceVariableNames: 'persons companyFilter isInner'	classVariableNames: ''	poolDictionaries: ''	category: 'ContactManager-WAComponent'!!WAPersonList methodsFor: 'removing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!removePerson: aPerson	self personService removeEntity: aPerson! !!WAPersonList methodsFor: 'rendering' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!renderPerson: aPerson on: html	html		tableRow: [ html				tableData: aPerson firstName;				tableData: aPerson lastName;				tableData: aPerson email;				tableData: aPerson phoneNumber;				tableData: aPerson address;				"tableData: aPerson company;"					tableData: aPerson position;				tableData: [ html						tbsButtonGroup: [ self								renderEditButtonFor: aPerson on: html with: [ WAPerson editPerson: aPerson ];								renderRemoveButtonFor: aPerson on: html with: [ self removePerson: aPerson ] ] ] ]! !!WAPersonList methodsFor: 'rendering' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!renderPersonsOn: html	html		tbsTable: [ html				tableHead: [ html						tableHeading: 'Name';						tableHeading: 'Surname';						tableHeading: 'Email';						tableHeading: 'PhoneNumber';						tableHeading: 'Address';						"tableHeading: 'Company';"						tableHeading: 'Position' ].			self personsDo: [ :person | self renderPerson: person on: html ] ]! !!WAPersonList methodsFor: 'rendering' stamp: 'ArturNasyrov 1/4/2018 02:03'!renderContentOn: html	self isInner		ifFalse: [ html heading				level: 1;				with: 'Person list' ]		ifTrue: [ html heading				level: 2;				with: 'Company person list' ].	html		tbsForm: [ self renderValidationMessagesOn: html.			self renderPersonsOn: html.			self renderNewButtonsOn: html with: WAPerson newPerson ]! !!WAPersonList methodsFor: 'initialization' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!initialize	super initialize.	isInner := false! !!WAPersonList methodsFor: 'enumerating' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!personsDo: aBlock	self persons do: aBlock! !!WAPersonList methodsFor: 'binding' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!rebind	persons := companyFilter isNotNil		ifTrue: [ self getAllPersonsWithFilter: self companyFilter ]		ifFalse: [ self getAllPersons ]! !!WAPersonList methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!persons	^ persons		ifNil: [ persons := self companyFilter isNotNil				ifTrue: [ self getAllPersonsWithFilter: self companyFilter ]				ifFalse: [ self getAllPersons ] ]! !!WAPersonList methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!getAllPersonsWithFilter: aFilter	| x |	x := self personService  selectPersonsByCompany: aFilter.	x isNotNil		ifTrue: [ ^ x ]		ifFalse: [ ^ OrderedCollection new ]	! !!WAPersonList methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!isInner	^ isInner! !!WAPersonList methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!companyFilter: aCompany	companyFilter := aCompany! !!WAPersonList methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!getAllPersons	| x |	x := self personService  selectAll.	x isNotNil		ifTrue: [ ^ x ]		ifFalse: [ ^ OrderedCollection new ]	! !!WAPersonList methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!personService	^ ServiceLocatorDefault resolveWithName: 'PersonService'.! !!WAPersonList methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!companyFilter	^ companyFilter! !!WAPersonList methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!isInner: anIsInner	isInner := anIsInner! !!WAPersonList methodsFor: 'updating' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!updateRoot: anHtmlRoot	super updateRoot: anHtmlRoot.	anHtmlRoot title: 'Persons'! !WAEdit subclass: #WAProspect	instanceVariableNames: 'prospect'	classVariableNames: ''	poolDictionaries: ''	category: 'ContactManager-WAComponent'!!WAProspect methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!prospectService	^ ServiceLocatorDefault resolveWithName: 'ProspectService'.! !!WAProspect methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 03:59'!prospectStateService	^ ServiceLocatorDefault resolveWithName: 'ProspectStateService'.! !!WAProspect methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!companyService	^ ServiceLocatorDefault resolveWithName: 'CompanyService'! !!WAProspect methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!prospect	^ prospect! !!WAProspect methodsFor: 'save' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!saveProspect	self prospectService saveEntity: prospect! !!WAProspect methodsFor: 'hooks' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!style    ^ super style! !!WAProspect methodsFor: 'rendering' stamp: 'ArturNasyrov 1/4/2018 04:37'!renderRevenueFieldOn: html	WARenderUtility		renderNumberInputFieldOn: html		withValue: tmpEntity revenue		withLabel: 'Revenue'		withRequired: true		withPlaceholder: 'Revenue'		withCallback: [ :value | tmpEntity revenue: value ]! !!WAProspect methodsFor: 'rendering' stamp: 'ArturNasyrov 1/4/2018 03:43'!renderMandaysFieldOn: html	WARenderUtility		renderNumberInputFieldOn: html		withValue: tmpEntity mandays		withLabel: 'Mandays'		withRequired: true		withPlaceholder: 'Mandays'		withCallback: [ :value | tmpEntity mandays: value ]! !!WAProspect methodsFor: 'rendering' stamp: 'ArturNasyrov 1/4/2018 03:58'!renderStateFieldOn: html	| states |	states := self prospectStateService selectAll.WARenderUtility renderChoices: states on:  html withSelectedValue: tmpEntity state withLabel: 'State' withRequired: true withCallback:  [ :value | tmpEntity state: value ]! !!WAProspect methodsFor: 'rendering' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!renderCompanyFieldOn: html	| companies |	companies := self companyService selectAll.WARenderUtility renderDbChoices: companies on:  html withSelectedValue: tmpEntity company withLabel: 'Company' withRequired: true withCallback:  [ :value | tmpEntity company: (OID value: value) ]! !!WAProspect methodsFor: 'rendering' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!renderNameFieldOn: html	WARenderUtility		renderInputFieldOn: html		withValue: tmpEntity pname		withLabel: 'Name'		withRequired: true		withPlaceholder: 'Name'		withCallback: [ :value | tmpEntity pname: value ]! !!WAProspect methodsFor: 'rendering' stamp: 'ArturNasyrov 1/4/2018 04:00'!renderFieldsOn: html	self renderNameFieldOn: html.	self renderCompanyFieldOn: html.	self renderStateFieldOn: html.	self renderProbabilityFieldOn: html.	self renderMandaysFieldOn: html.	self renderRevenueFieldOn: html.! !!WAProspect methodsFor: 'rendering' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!renderContentOn: html	| headerText |	headerText := self isNew		ifTrue: [ 'New Prospect' ]		ifFalse: [ 'Edit Prospect' ].	html heading with: headerText.	html tbsForm		with: [ self renderValidationMessagesOn: html.			self renderFieldsOn: html.			self				renderButtonsOn: html				withSubmitCallback: [ :tmp | 					self prospect copyFrom: tmp.					self saveProspect.					self answer: prospect ].			html break ]! !!WAProspect methodsFor: 'rendering' stamp: 'ArturNasyrov 1/4/2018 04:43'!renderProbabilityFieldOn: html	WARenderUtility		renderNumberInputFieldOn: html		withValue: tmpEntity probability		withLabel: 'Probability, %'		withRequired: true		withPlaceholder: 'Probability'		withCallback: [ :value | tmpEntity probability: value ]! !!WAProspect methodsFor: 'initialization' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!initialize	super initialize.	prospect := Prospect new.	tmpEntity := Prospect new! !!WAProspect methodsFor: 'initialization' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!setProspect: aProspect	tmpEntity := aProspect clone.	prospect := aProspect.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!WAProspect class	instanceVariableNames: ''!!WAProspect class methodsFor: 'instance creation' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!newProspect	^ self new		setProspect:  Prospect  new;		isNew: true;		yourself! !!WAProspect class methodsFor: 'editing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!editProspect: aProspect	^ self new		setProspect: aProspect;		isNew: false;		yourself! !WAList subclass: #WAProspectList	instanceVariableNames: 'prospects companyFilter isInner'	classVariableNames: ''	poolDictionaries: ''	category: 'ContactManager-WAComponent'!!WAProspectList methodsFor: 'enumerating' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!prospectsDo: aBlock	self prospects do: aBlock! !!WAProspectList methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!isInner	^ isInner! !!WAProspectList methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!companyFilter: aCompany	companyFilter := aCompany! !!WAProspectList methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!prospects	^ prospects		ifNil: [ prospects := self companyFilter isNotNil				ifTrue: [ self getAllProspectsWithFilter: self companyFilter ]				ifFalse: [ self getAllProspects ] ]! !!WAProspectList methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!getAllProspectsWithFilter: aFilter	| x |	x := self prospectService  selectProspectsByCompany: aFilter.	x isNotNil		ifTrue: [ ^ x ]		ifFalse: [ ^ OrderedCollection new ]	! !!WAProspectList methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!rebind	prospects  := companyFilter isNotNil		ifTrue: [ self getAllProspectsWithFilter: self companyFilter ]		ifFalse: [ self getAllProspects ]! !!WAProspectList methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 04:41'!prospectStateService	^ ServiceLocatorDefault resolveWithName: 'ProspectStateService'.! !!WAProspectList methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!prospectService	^ ServiceLocatorDefault resolveWithName: 'ProspectService'.! !!WAProspectList methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!companyFilter	^ companyFilter! !!WAProspectList methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!getAllProspects	| x |	x := self prospectService selectAll.	x isNotNil		ifTrue: [ ^ x ]		ifFalse: [ ^ OrderedCollection new ]! !!WAProspectList methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!isInner: anIsInner	isInner := anIsInner! !!WAProspectList methodsFor: 'removing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!removeProspect: aProspect	self prospectService removeEntity: aProspect! !!WAProspectList methodsFor: 'initialization' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!initialize	super initialize.	isInner := false! !!WAProspectList methodsFor: 'updating' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!updateRoot: anHtmlRoot	super updateRoot: anHtmlRoot.	anHtmlRoot title: 'Prospects'! !!WAProspectList methodsFor: 'rendering' stamp: 'ArturNasyrov 1/4/2018 04:43'!renderProspectsOn: html	html		tbsTable: [ html				tableHead: [ html						tableHeading: 'Name';						tableHeading: 'Mandays';						tableHeading: 'State';						tableHeading: 'Probability, %';						tableHeading: 'Revenue' ].			self prospectsDo: [ :prospect | self renderProspect: prospect on: html ] ]! !!WAProspectList methodsFor: 'rendering' stamp: 'ArturNasyrov 1/4/2018 04:42'!renderProspect: aProspect on: html	html		tableRow: [ html				tableData: aProspect pname;				tableData: aProspect mandays;				tableData: (self prospectStateService getProspectStateById: aProspect state);				tableData: aProspect probability;				tableData: aProspect revenue;				tableData: [ html						tbsButtonGroup: [ self								renderEditButtonFor: aProspect on: html with: [ WAProspect editProspect: aProspect ];								renderRemoveButtonFor: aProspect on: html with: [ self removeProspect: aProspect ] ] ] ]! !!WAProspectList methodsFor: 'rendering' stamp: 'ArturNasyrov 1/4/2018 04:51'!renderContentOn: html	self isInner		ifFalse: [ html heading				level: 1;				with: 'Prospect list' ]		ifTrue: [ html heading				level: 2;				with: 'Company prospect list' ].	html		tbsForm: [ self renderValidationMessagesOn: html.			self renderProspectsOn: html.			self renderNewButtonsOn: html with: WAProspect newProspect ]! !WAComponent subclass: #WAScreenHeader	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'ContactManager-WAComponent'!!WAScreenHeader methodsFor: 'rendering' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!renderContentOn: html   html tbsNavbar beDefault with: [      html tbsNavbarBrand         url: '#';         with: 'Contact App' ]! !WAComponent subclass: #WAScreenNavigation	instanceVariableNames: 'screenPart'	classVariableNames: ''	poolDictionaries: ''	category: 'ContactManager-WAComponent'!!WAScreenNavigation methodsFor: 'navigation' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!navigationParts	^ NavigationManager mainNavigation! !!WAScreenNavigation methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!screenPart: aScreenPart	screenPart := aScreenPart! !!WAScreenNavigation methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!screenPart	^ screenPart! !!WAScreenNavigation methodsFor: 'rendering' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!renderContentOn: html	html		tbsListGroup: [ html tbsListGroupItem with: [ html strong: 'Menu' ].			self navigationParts do: [ :part | self renderPartOn: html with: part ] ]! !!WAScreenNavigation methodsFor: 'rendering' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!renderPartOn: html with: part	html tbsLinkifyListGroupItem		callback: [ self screenPart current: (part link initializeWithScreenPart: self screenPart) ];		with: part title	"      class: 'active' if: aCategory = self postsList currentCategory ;"! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!WAScreenNavigation class	instanceVariableNames: ''!!WAScreenNavigation class methodsFor: 'initialization' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!initializeWithScreenPart: aScreenPart	^ self new		screenPart: aScreenPart;		yourself! !WAComponent subclass: #WAScreenPart	instanceVariableNames: 'header nav current'	classVariableNames: ''	poolDictionaries: ''	category: 'ContactManager-WAComponent'!!WAScreenPart methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!current: aCurrent	current:=aCurrent! !!WAScreenPart methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!current	^ current! !!WAScreenPart methodsFor: 'hooks' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!children	^ OrderedCollection with: header with:nav with:current! !!WAScreenPart methodsFor: 'rendering' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!renderContentOn: html	html render: header.	html		tbsContainer: [ html tbsRow				showGrid;				with: [ html tbsColumn						extraSmallSize: 12;						smallSize: 2;						mediumSize: 4;						with: [ html render: nav ].					html tbsColumn						extraSmallSize: 12;						smallSize: 10;						mediumSize: 8;						with: [ html render: current ] ] ]! !!WAScreenPart methodsFor: 'initialization' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!initialize	super initialize.	header := WAScreenHeader new.	nav := WAScreenNavigation initializeWithScreenPart: self.	current := WACompanyList initializeWithScreenPart: self! !WAContactApp initialize!Object subclass: #BaseEntity	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'ContactManager-Entities'!!BaseEntity methodsFor: 'testing' stamp: 'ArturNasyrov 1/4/2018 02:37'!isValid	self validators isNil		ifTrue: [ ^ true ]		ifFalse: [ self validators isEmpty				ifTrue: [ ^ true ]				ifFalse: [ ^ ValidationManager validate: self onGroup: self class name ] ]! !!BaseEntity methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!id	^ self class voyageId: self! !!BaseEntity methodsFor: 'validation' stamp: 'ArturNasyrov 1/4/2018 01:37'!validatorsOnRemove	^ self subclassResponsibility! !!BaseEntity methodsFor: 'validation' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!validators	^ self subclassResponsibility! !!BaseEntity methodsFor: 'accessors' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!eq: aCmpEntity	^ self id = aCmpEntity id! !BaseEntity subclass: #Company	instanceVariableNames: 'cname manager country isCustomer isPartner'	classVariableNames: ''	poolDictionaries: ''	category: 'ContactManager-Entities'!!Company methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!country	^ country! !!Company methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!isPartner: anObject	isPartner := anObject! !!Company methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!isPartner	^ isPartner! !!Company methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!country: anObject	country := anObject! !!Company methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!isCustomer: anObject	isCustomer := anObject! !!Company methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!cname: anObject	cname := anObject! !!Company methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!isCustomer	^ isCustomer! !!Company methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!manager: anObject	manager := anObject! !!Company methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!manager	^ manager! !!Company methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!cname	^ cname! !!Company methodsFor: 'validation' stamp: 'ArturNasyrov 1/4/2018 01:51'!validatorsOnRemove	| d |	d := OrderedCollection new.	d addLast: #('RemoveCompanyValidator' 'Company contains dependencies in Persons and Prospects').	^ d! !!Company methodsFor: 'validation' stamp: 'ArturNasyrov 1/4/2018 01:03'!validators	| d |	d := OrderedCollection new.	d addLast: #(#cname 'RequiredValidator' 'Company Name').	d addLast: #(#country 'RequiredOidValidator' 'Country').	d addLast: #(#manager 'RequiredOidValidator' 'Manager').	^ d! !!Company methodsFor: 'initialization' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!initialize	super initialize.	isCustomer := false.	isPartner := false.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Company class	instanceVariableNames: ''!!Company class methodsFor: 'testing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!cname: cname manager: manager country: country isCustomer: isCustomer isPartner: isPartner	^ self new		cname: cname;		manager: manager;		country: country;		isCustomer: isCustomer;		isPartner: isPartner;		yourself! !!Company class methodsFor: 'testing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!isVoyageRoot	^ true.! !BaseEntity subclass: #Person	instanceVariableNames: 'firstName lastName email phoneNumber address company position'	classVariableNames: ''	poolDictionaries: ''	category: 'ContactManager-Entities'!!Person commentStamp: 'FirstnameLastname 12/11/2017 23:05' prior: 0!I represent a person in others companies.!!Person methodsFor: 'validation' stamp: 'ArturNasyrov 1/4/2018 01:37'!validatorsOnRemove	^ OrderedCollection new! !!Person methodsFor: 'validation' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!validators	| d |	d := OrderedCollection new.	d addLast: #(#firstName 'RequiredValidator' 'First Name').	d addLast: #(#lastName 'RequiredValidator' 'Last Name').	d addLast: #(#company 'RequiredOidValidator' 'Company').	^ d! !!Person methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!lastName	^ lastName! !!Person methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!phoneNumber	^ phoneNumber! !!Person methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!company"company oid getter"	^ company! !!Person methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!phoneNumber: anInteger	phoneNumber := anInteger! !!Person methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!firstName: aString	firstName := aString! !!Person methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!email	^ email! !!Person methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!email: aString	email := aString! !!Person methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!address: aString	address := aString! !!Person methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!address	^ address! !!Person methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!lastName: aString	lastName := aString! !!Person methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!firstName	^ firstName! !!Person methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!position	^ position! !!Person methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!position: aString	position := aString! !!Person methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!company: aCompany"company oid setter"	company := aCompany! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Person class	instanceVariableNames: ''!!Person class methodsFor: 'initialization' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!firstName: aFirstNameString lastName: aLastNameString email: anEmailString phoneNumber: aPhoneNumberString address: anAddressString company: aCompanyString position: aPositionString	^ self new		firstName: aFirstNameString;		lastName: aLastNameString;		email: anEmailString;		phoneNumber: aPhoneNumberString;		address: anAddressString;		company: aCompanyString;		position: aPositionString;		yourself! !!Person class methodsFor: 'testing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!isVoyageRoot	^ true.! !BaseEntity subclass: #Prospect	instanceVariableNames: 'pname revenue mandays state description company probability'	classVariableNames: ''	poolDictionaries: ''	category: 'ContactManager-Entities'!!Prospect methodsFor: 'removing' stamp: 'ArturNasyrov 1/4/2018 01:37'!validatorsOnRemove	^ OrderedCollection new! !!Prospect methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!description: anObject	description := anObject! !!Prospect methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!state: anObject	state := anObject! !!Prospect methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!company	^ company! !!Prospect methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!mandays	^ mandays! !!Prospect methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!pname: anObject	pname := anObject! !!Prospect methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!probability	^ probability! !!Prospect methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!description	^ description! !!Prospect methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 04:35'!probability: aProbability"Range 0 - 100"	probability := aProbability! !!Prospect methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 04:35'!mandays: anObject"Range 0 - "	mandays := anObject! !!Prospect methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!revenue	^ revenue! !!Prospect methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!pname	^ pname! !!Prospect methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!state	^ state! !!Prospect methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!company: anObject	company := anObject! !!Prospect methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 04:35'!revenue: anObject"Range 0 - "	revenue := anObject! !!Prospect methodsFor: 'validation' stamp: 'ArturNasyrov 1/4/2018 04:23'!validators	| d |	d := OrderedCollection new.	d addLast: #(#pname 'RequiredValidator' 'Name').	d addLast: #(#company 'RequiredOidValidator' 'Company').	d addLast: #(#probability 'RequiredValidator' 'Probability').	d addLast: #(#probability 'RangeValidator' 'Probability' 0 100).	d addLast: #(#revenue 'RequiredValidator' 'Revenue').	d addLast: #(#revenue 'RangeValidator' 'Revenue' 0 nil).	d addLast: #(#mandays 'RequiredValidator' 'Mandays').	d addLast: #(#mandays 'RangeValidator' 'Mandays' 0 nil).	d addLast: #(#state 'RequiredOidValidator' 'State').	^ d! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Prospect class	instanceVariableNames: ''!!Prospect class methodsFor: 'testing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!isVoyageRoot	^ true.! !Object subclass: #NavigationManager	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'ContactManager-Navigation'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!NavigationManager class	instanceVariableNames: ''!!NavigationManager class methodsFor: 'initialization' stamp: 'ArturNasyrov 1/4/2018 04:52'!mainNavigation	^ {(NavigationPart createWithTitle: 'Contacts' withLink: WACompanyList).	(NavigationPart createWithTitle: 'Persons' withLink: WAPersonList).	(NavigationPart createWithTitle: 'Prospects' withLink: WAProspectList)}! !Object subclass: #NavigationPart	instanceVariableNames: 'title link'	classVariableNames: ''	poolDictionaries: ''	category: 'ContactManager-Navigation'!!NavigationPart methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!link	^ link! !!NavigationPart methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!title	^ title! !!NavigationPart methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!link: anObject	link := anObject! !!NavigationPart methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!title: anObject	title := anObject! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!NavigationPart class	instanceVariableNames: ''!!NavigationPart class methodsFor: 'initialization' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!createWithTitle: title withLink: link	^ self new		title: title;		link: link;		yourself! !Object subclass: #BaseRepositoryService	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'ContactManager-Services'!!BaseRepositoryService methodsFor: 'removing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!removeEntity: anEntity	anEntity remove.! !!BaseRepositoryService methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!selectAll	^ self subclassResponsibility! !!BaseRepositoryService methodsFor: 'save' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!saveEntity: anEntity	anEntity save.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!BaseRepositoryService class	instanceVariableNames: ''!!BaseRepositoryService class methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!reset	VORepository current reset! !!BaseRepositoryService class methodsFor: 'as yet unclassified' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!setupMemoryRepository"called into WAContactApp test initialization"	| repository |	repository := VOMemoryRepository new.	repository enableSingleton! !!BaseRepositoryService class methodsFor: 'as yet unclassified' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!setupTestMongoRepository"called into WAContactApp initialization"	| repository |	repository := VOMongoRepository host: '127.0.0.1:27017' database: 'contactTests'.	repository enableSingleton! !!BaseRepositoryService class methodsFor: 'as yet unclassified' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!setupMongoRepository"called into WAContactApp initialization"	| repository |	repository := VOMongoRepository host: '127.0.0.1:27017' database: 'contacts'.	repository enableSingleton! !BaseRepositoryService subclass: #CompanyService	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'ContactManager-Services'!!CompanyService methodsFor: 'selection' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!selectAll	^ Company selectAllSortBy: {(#cname -> VOOrder ascending)}! !BaseRepositoryService subclass: #CountryService	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'ContactManager-Services'!!CountryService methodsFor: 'selection' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!selectAll	^ self class countries! !!CountryService methodsFor: 'selection' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!getCountryById: anIndex	anIndex isNil		ifTrue: [ ^ nil ]		ifFalse: [ ^ self class countries at: anIndex ]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CountryService class	instanceVariableNames: ''!!CountryService class methodsFor: 'data' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!countries	| dict |	dict := Dictionary new.	dict at: 1 put: 'Angola'.	dict at: 2 put: 'Czechia'.	dict at: 3 put: 'Russia'.	dict at: 4 put: 'Slovakia'.	dict at: 5 put: 'United States'.	^ dict! !BaseRepositoryService subclass: #ManagerService	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'ContactManager-Services'!!ManagerService methodsFor: 'selection' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!selectAll	^ self class managers! !!ManagerService methodsFor: 'selection' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!getManagerById: anIndex	(anIndex isNil or: anIndex = '')		ifTrue: [ ^ nil ]		ifFalse: [ ^ self class managers at: anIndex ]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ManagerService class	instanceVariableNames: ''!!ManagerService class methodsFor: 'as yet unclassified' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!managers	| dict |	dict := Dictionary new.	dict at: 1 put: 'Donald Trump'.	dict at: 2 put: 'Vladimir Putin'.	dict at: 3 put: 'Hillary Clinton'.	dict at: 4 put: 'Vladimir Pushkin'.	dict at: 5 put: 'Winston Churchill'.	dict at: 6 put: 'Jara Cimrman'.	^ dict! !BaseRepositoryService subclass: #PersonService	instanceVariableNames: 'persons'	classVariableNames: ''	poolDictionaries: ''	category: 'ContactManager-Services'!!PersonService methodsFor: 'selection' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!selectAll	^ Person		selectAllSortBy:			{(#lastName -> VOOrder ascending).			(#firstName -> VOOrder ascending)}! !!PersonService methodsFor: 'selection' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!selectPersonsByCompany: aCompany	| oid |	oid := aCompany id.	^ Person selectMany: {('company' -> oid)}! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PersonService class	instanceVariableNames: ''!!PersonService class methodsFor: 'current' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!createDefault	^ self new		addPerson:			(Person				firstName: 'FN1'				lastName: 'LN1'				email: 'E1'				phoneNumber: 'PN1'				address: 'A1'				company: 'C1'				position: 'P1');		addPerson:			(Person				firstName: 'FN2'				lastName: 'LN2'				email: 'E2'				phoneNumber: 'PN2'				address: 'A2'				company: 'C2'				position: 'P2');		addPerson:			(Person				firstName: 'FN1'				lastName: 'LN3'				email: 'E3'				phoneNumber: 'PN3'				address: 'A3'				company: 'C3'				position: 'P3')! !BaseRepositoryService subclass: #ProspectService	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'ContactManager-Services'!!ProspectService methodsFor: 'selection' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!selectAll	^ Prospect selectAllSortBy: {(#pname -> VOOrder ascending)}! !!ProspectService methodsFor: 'selection' stamp: 'ArturNasyrov 1/4/2018 01:53'!selectProspectsByCompany: aCompany	| oid |	oid := aCompany id.	^ Prospect selectMany: {('company' -> oid)}! !BaseRepositoryService subclass: #ProspectStateService	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'ContactManager-Services'!!ProspectStateService methodsFor: 'selection' stamp: 'ArturNasyrov 1/4/2018 03:52'!selectAll	^ self class prospectStates! !!ProspectStateService methodsFor: 'selection' stamp: 'ArturNasyrov 1/4/2018 03:54'!getProspectStateById: anIndex	anIndex isNil		ifTrue: [ ^ nil ]		ifFalse: [ ^ self class prospectStates at: anIndex ]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ProspectStateService class	instanceVariableNames: 'prospectStates'!!ProspectStateService class methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 03:53'!prospectStates	| dict |	dict := Dictionary new.	dict at: 1 put: 'Opened'.	dict at: 2 put: 'Closed'.	dict at: 3 put: 'Won'.	dict at: 4 put: 'Lost'.	^ dict! !Object subclass: #ServiceLocator	instanceVariableNames: 'serviceDict'	classVariableNames: ''	poolDictionaries: ''	category: 'ContactManager-Services'!!ServiceLocator methodsFor: 'registration' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!registerWithName: aName service: aServiceInit	| notRegistered |	notRegistered := (self serviceDict includesKey: aName) not.	notRegistered		ifTrue: [ self serviceDict at: aName put: aServiceInit ].	^ notRegistered! !!ServiceLocator methodsFor: 'registration' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!resolveWithName: aName	| service |	service := self serviceDict at: aName ifAbsent: nil.	service isNil		ifTrue: [ ^ nil ]		ifFalse: [ ^ service new ]! !!ServiceLocator methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!serviceDict	^ serviceDict ifNil: [ serviceDict := Dictionary new ]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ServiceLocator class	instanceVariableNames: 'uniqueInstance'!!ServiceLocator class methodsFor: 'initialization' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!initialize	^ self! !!ServiceLocator class methodsFor: 'instance creation' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!default	uniqueInstance ifNil: [ uniqueInstance := self basicNew initialize ].	^ uniqueInstance! !!ServiceLocator class methodsFor: 'instance creation' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!new	self error: 'Service locator is a singleton'! !!ServiceLocator class methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!reset	uniqueInstance		ifNotNil: [ uniqueInstance serviceDict removeAll.			uniqueInstance := nil ]! !Object subclass: #ServiceLocatorDefault	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'ContactManager-Services'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ServiceLocatorDefault class	instanceVariableNames: ''!!ServiceLocatorDefault class methodsFor: 'registration' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!registerWithName: aName service: aServiceInit	^ ServiceLocator default registerWithName: aName service: aServiceInit! !!ServiceLocatorDefault class methodsFor: 'registration' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!resolveWithName: aName	^ ServiceLocator default resolveWithName: aName! !!ServiceLocatorDefault class methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!reset	ServiceLocator reset.! !ServiceLocator initialize!Object subclass: #BaseValidator	instanceVariableNames: 'fieldDisplayName'	classVariableNames: ''	poolDictionaries: ''	category: 'ContactManager-Validation'!!BaseValidator methodsFor: 'validation' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!getMessage	^self subclassResponsibility.! !BaseValidator subclass: #BaseRequiredValidator	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'ContactManager-Validation'!!BaseRequiredValidator methodsFor: 'validation' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!validateValue: value withDisplayFieldName: fname	^ self subclassResponsibility! !BaseValidator subclass: #RangeValidator	instanceVariableNames: 'min max'	classVariableNames: ''	poolDictionaries: ''	category: 'ContactManager-Validation'!!RangeValidator methodsFor: 'validation' stamp: 'ArturNasyrov 1/4/2018 04:18'!getMessage	min ifNil: [ ^ '"' , fieldDisplayName , '" field is not less or equal than ' , max asString ].	max ifNil: [ ^ '"' , fieldDisplayName , '" field is not great or equal than ' , min asString ].	^ '"' , fieldDisplayName , '" field is not in the range between ' , min asString , ' and ' , max asString! !!RangeValidator methodsFor: 'validation' stamp: 'ArturNasyrov 1/4/2018 04:02'!validateValue: value withDisplayFieldName: fname withParams: params	value isEmptyOrNil		ifTrue: [ ^ true ]		ifFalse: [ | x |			x := 0.			fieldDisplayName := fname.			min := params at: 1.			max := params at: 2.			[ x := value asNumber ]				on: Error				do: [ ^ false ].			min ifNil: [ ^ x <= max ].			max ifNil: [ ^ x >= min ].			^ x >= min and: x <= max ]! !BaseValidator subclass: #RemoveCompanyValidator	instanceVariableNames: 'msg'	classVariableNames: ''	poolDictionaries: ''	category: 'ContactManager-Validation'!!RemoveCompanyValidator methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 01:50'!prospectService	^ ServiceLocatorDefault resolveWithName: 'ProspectService'.! !!RemoveCompanyValidator methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 01:56'!personService	^ ServiceLocatorDefault resolveWithName: 'PersonService'.! !!RemoveCompanyValidator methodsFor: 'validation' stamp: 'ArturNasyrov 1/4/2018 01:47'!getMessage	^ msg! !!RemoveCompanyValidator methodsFor: 'validation' stamp: 'ArturNasyrov 1/4/2018 01:50'!validateEntity: anEntity withMessage: aMsg	| persons prospects |	msg := aMsg.	persons := self personService selectPersonsByCompany: anEntity.	persons isEmpty		ifTrue: [ prospects := self prospectService selectProspectsByCompany: anEntity.			prospects isEmpty				ifTrue: [ ^ true ] ].	^ false! !BaseRequiredValidator subclass: #RequiredOidValidator	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'ContactManager-Validation'!!RequiredOidValidator methodsFor: 'validation' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!validateValue: value withDisplayFieldName: fname	fieldDisplayName := fname.	^ value isNotNil! !!RequiredOidValidator methodsFor: 'validation' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!getMessage	^ '"' , fieldDisplayName , '" field is required'! !BaseRequiredValidator subclass: #RequiredValidator	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'ContactManager-Validation'!!RequiredValidator methodsFor: 'validation' stamp: 'ArturNasyrov 1/4/2018 04:33'!validateValue: value withDisplayFieldName: fname	fieldDisplayName := fname.	value isNil		ifTrue: [ ^ false ]		ifFalse: [ | v |			v := value asString.			v isEmpty				ifTrue: [ ^ false ]				ifFalse: [ v := v trim.					^ v ~= '' ] ]! !!RequiredValidator methodsFor: 'validation' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!getMessage	^ '"' , fieldDisplayName , '" field is required'! !Object subclass: #ValidationManager	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'ContactManager-Validation'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ValidationManager class	instanceVariableNames: 'errors group'!!ValidationManager class methodsFor: 'validation' stamp: 'ArturNasyrov 1/4/2018 02:42'!validateRemove: anEntity onGroup: aGroup	"set up group to display in proper place"	group := aGroup.	^ self validateRemove: anEntity! !!ValidationManager class methodsFor: 'validation' stamp: 'ArturNasyrov 1/4/2018 02:43'!validate: anEntity onGroup: aGroup	"set up group to display in proper place"	group := aGroup.	^ self validate: anEntity! !!ValidationManager class methodsFor: 'validation' stamp: 'ArturNasyrov 1/4/2018 01:41'!validateRemove: anEntity	| res |	" remove all elements of previous validation"	errors isNil		ifTrue: [ errors := OrderedCollection new ]		ifFalse: [ errors removeAll ].	" run all registered validators"	res := true.	anEntity validatorsOnRemove		do: [ :v | 			| isValid validator vname msg |			"v is the array of two elements: 				1 validator class name to be resolved				2 msg to be shown "			vname := v at: 1.			msg := v at: 2.			validator := ServiceLocatorDefault resolveWithName: vname.			isValid := validator validateEntity: anEntity withMessage: msg.			isValid				ifFalse: [ errors addLast: validator getMessage.					res := false ] ].	^ res! !!ValidationManager class methodsFor: 'validation' stamp: 'ArturNasyrov 1/4/2018 04:33'!validate: anEntity	| res |	" remove all elements of previous validation"	errors isNil		ifTrue: [ errors := OrderedCollection new ]		ifFalse: [ errors removeAll ].	" run all registered validators"	res := true.	anEntity validators		do: [ :v | 			| isValid validator vname fname dfname |			"v is the array of three or more elements: 				1. entity field name				2 validator class name to be resolved				3. field display name to be shown 				are required;				other elements are params for the validator"			fname := v at: 1.			vname := v at: 2.			dfname := v at: 3.			validator := ServiceLocatorDefault resolveWithName: vname.			isValid := v size > 3				ifTrue: [ validator validateValue: (anEntity instVarNamed: fname) withDisplayFieldName: dfname withParams: (v copyFrom: 4 to: v size) ]				ifFalse: [ validator validateValue: (anEntity instVarNamed: fname) withDisplayFieldName: dfname ].			isValid				ifFalse: [ errors addLast: validator getMessage.					res := false ] ].	^ res! !!ValidationManager class methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 02:22'!errorsOnGroup: aGroup	group = aGroup		ifTrue: [ ^ errors ]		ifFalse: [ ^ OrderedCollection new ]! !!ValidationManager class methodsFor: 'accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!errors	^ errors ! !TestCase subclass: #CompanyTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'ContactManager-Tests'!!CompanyTest methodsFor: 'tests' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!testCreation	| company |	company := Company		cname: 'Sony'		manager: 'Donald'		country: 'Russia'		isCustomer: true		isPartner: true.	self assert: company cname = 'Sony'.	self assert: company manager = 'Donald'.	self assert: company country = 'Russia'.	self assert: company isCustomer = true.	self assert: company isPartner = true! !TestCase subclass: #CompanyValidationTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'ContactManager-Tests'!!CompanyValidationTest methodsFor: 'initialization' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!setUp	WAContactApp initialize.! !!CompanyValidationTest methodsFor: 'tests' stamp: 'ArturNasyrov 1/4/2018 01:10'!testNotEmptyCName	| c |	c := Company new		cname: '1';		country: 1;		manager: 1.	self assert: c isValid equals: true! !!CompanyValidationTest methodsFor: 'tests' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!testEmptyCName	| c |	c := Company new.	self assert: c isValid equals: false! !TestCase subclass: #CountryServiceTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'ContactManager-Tests'!!CountryServiceTest commentStamp: '<historical>' prior: 0!A CountryServiceTest is a test class for testing the behavior of CountryService!!CountryServiceTest methodsFor: 'tests-as yet unclassified' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!testGetCountryById	|countryService|.	countryService := CountryService new.	self assert: (countryService getCountryById: 1) equals: 'Angola'. 	self assert: (countryService getCountryById: 2) equals: 'Czechia'. 	self assert: (countryService getCountryById: 3) equals: 'Russia'. 	self assert: (countryService getCountryById: 4) equals: 'Slovakia'. 	self assert: (countryService getCountryById: 5) equals: 'United States'. 	! !TestCase subclass: #ManagerServiceTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'ContactManager-Tests'!!ManagerServiceTest commentStamp: '<historical>' prior: 0!A ManagerServiceTest is a test class for testing the behavior of ManagerService!!ManagerServiceTest methodsFor: 'tests-as yet unclassified' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!testGetManagerById	|managerService|.	managerService  := ManagerService new.		self assert: (managerService  getManagerById: 1) equals: 'Donald Trump'.	self assert: (managerService  getManagerById: 2) equals: 'Vladimir Putin'.	self assert: (managerService  getManagerById: 3) equals: 'Hillary Clinton'.	self assert: (managerService  getManagerById: 4) equals: 'Vladimir Pushkin'.	self assert: (managerService  getManagerById: 5) equals: 'Winston Churchill'.	self assert: (managerService  getManagerById: 6) equals: 'Jara Cimrman'.! !TestCase subclass: #NavigationManagerTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'ContactManager-Tests'!!NavigationManagerTest commentStamp: '<historical>' prior: 0!test whether manager contains correct default values!!NavigationManagerTest methodsFor: 'tests' stamp: 'ArturNasyrov 1/4/2018 04:53'!testMainNavigation	| navigation tmp |	navigation := NavigationManager mainNavigation.	tmp := navigation at: 1.	self assert: tmp title equals: 'Contacts'.	self assert: tmp link equals: WACompanyList.	tmp := navigation at: 2.	self assert: tmp title equals: 'Persons'.	self assert: tmp link equals: WAPersonList.	tmp := navigation at: 3.	self assert: tmp title equals: 'Prospects'.	self assert: tmp link equals: WAProspectList! !TestCase subclass: #NavigationPartTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'ContactManager-Tests'!!NavigationPartTest commentStamp: '<historical>' prior: 0!A NavigationPartTest is a test class for testing the behavior of NavigationPart!!NavigationPartTest methodsFor: 'tests-accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!testLink	|navigationPart|.	navigationPart := NavigationPart new.	navigationPart link: 'http://beautyislands.com'.	self assert: navigationPart link equals: 'http://beautyislands.com'! !!NavigationPartTest methodsFor: 'tests-accessing' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!testTitle	|navigationPart|.	navigationPart := NavigationPart new.	navigationPart title: 'Beauty Islands'.	self assert: navigationPart title equals: 'Beauty Islands'! !TestCase subclass: #PersonTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'ContactManager-Tests'!!PersonTest methodsFor: 'tests' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!testCreation	| contact |	contact := Person		firstName: 'Vlad'		lastName: 'Khomchenko'		email: 'khomcvla@fit.cvut.cz'		phoneNumber: ''		address: 'Thakurova 9'		company: 'CVUT FIT'		position: 'Student'.	self assert: contact firstName = 'Vlad'.	self assert: contact lastName = 'Khomchenko'.	self assert: contact email = 'khomcvla@fit.cvut.cz'.	self assert: contact phoneNumber = ''.	self assert: contact address = 'Thakurova 9'.	self assert: contact company = 'CVUT FIT'.	self assert: contact position = 'Student'! !TestCase subclass: #RangeValidatorTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'ContactManager-Tests'!!RangeValidatorTest methodsFor: 'tests' stamp: 'ArturNasyrov 1/4/2018 03:17'!testMessage	| v |	v := RangeValidator new.	v validateValue: -5 withDisplayFieldName: 'TestField' withParams: #(0 100).	self assert: v getMessage equals: '"TestField" field is not in the range between 0 and 100'! !!RangeValidatorTest methodsFor: 'tests' stamp: 'ArturNasyrov 1/4/2018 03:20'!testValue	| vr |	vr := RangeValidator new validateValue: -1 withDisplayFieldName: 'TestField' withParams: #(0 100).	self assert: vr equals: false.	vr := RangeValidator new validateValue: 101 withDisplayFieldName: 'TestField' withParams: #(0 100).	self assert: vr equals: false.	vr := RangeValidator new validateValue: 1 withDisplayFieldName: 'TestField' withParams: #(0 100).	self assert: vr equals: true! !TestCase subclass: #RequiredOidValidatorTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'ContactManager-Tests'!!RequiredOidValidatorTest methodsFor: 'tests' stamp: 'ArturNasyrov 1/4/2018 03:09'!testMessage| v |	v := RequiredOidValidator new.	v validateValue: '' withDisplayFieldName: 'TestField'.	self assert: v getMessage equals: '"TestField" field is required'.! !!RequiredOidValidatorTest methodsFor: 'tests' stamp: 'ArturNasyrov 1/4/2018 03:12'!testValue	| vr |	vr := RequiredOidValidator new validateValue: nil withDisplayFieldName: 'TestField'.	self assert: vr equals: false.	vr := RequiredOidValidator new validateValue: 1 withDisplayFieldName: 'TestField'.	self assert: vr equals: true! !TestCase subclass: #RequiredValidatorTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'ContactManager-Tests'!!RequiredValidatorTest methodsFor: 'tests' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!testMessage| v |	v := RequiredValidator new.	v validateValue: '' withDisplayFieldName: 'TestField'.	self assert: v getMessage equals: '"TestField" field is required'.! !!RequiredValidatorTest methodsFor: 'tests' stamp: 'ArturNasyrov 1/4/2018 04:04'!testValue	| vr |	vr := RequiredValidator new validateValue: '' withDisplayFieldName: 'TestField'.	self assert: vr equals: false.	vr := RequiredValidator new validateValue: '   ' withDisplayFieldName: 'TestField'.	self assert: vr equals: false.	vr := RequiredValidator new validateValue: nil withDisplayFieldName: 'TestField'.	self assert: vr equals: false.	vr := RequiredValidator new validateValue: ' t  ' withDisplayFieldName: 'TestField'.	self assert: vr equals: true.	vr := RequiredValidator new validateValue: 0 withDisplayFieldName: 'TestField'.	self assert: vr equals: true! !TestCase subclass: #ServiceLocatorTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'ContactManager-Tests'!!ServiceLocatorTest methodsFor: 'tests' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!testResolveWithName	| locator service |	locator := ServiceLocator default.	locator serviceDict removeAll.	locator registerWithName: 'A' service: CompanyService.		service := locator resolveWithName: 'A'.	self assert: service class = CompanyService.		service := locator resolveWithName: 'B'.	self assert: service isNil.		ServiceLocator reset.	service := locator resolveWithName: 'A'.	self assert: service isNil! !!ServiceLocatorTest methodsFor: 'tests' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!testRegisterWithNameService	| locator serviceDict |	locator  := ServiceLocator default.	locator serviceDict removeAll.	locator registerWithName: 'A' service: (CompanyService). 	locator registerWithName: 'A' service: (PersonService). 	serviceDict := locator serviceDict.self assert: (serviceDict size = 1).		self assert: ((serviceDict at: 'A') class = CompanyService class). ! !!ServiceLocatorTest methodsFor: 'tests' stamp: 'ArturNasyrov 1/4/2018 00:22:44'!testSingleton	| l1 l2 s |			l1 := ServiceLocator default.	l2 := ServiceLocator default.		l1 serviceDict removeAll.	l2 serviceDict removeAll.		l1 registerWithName: 'A' service: (CompanyService). 	l2 registerWithName: 'B' service: (PersonService). 		s := l1 resolveWithName: 'B'.	self assert: s class = PersonService.		s := l2 resolveWithName: 'A'.	self assert: s class = CompanyService.! !